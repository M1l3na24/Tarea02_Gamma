import numpy as np
#import clasePersona as cP
import claseAlumno as cA
import claseProfesor as cPr
import claseCoordinador as cC


class Directorio:

    def __init__(self, almacenamiento):
        self.directorio = np.empty(almacenamiento, dtype=object)
        self.numeros_cuenta = set()
        self.numeros_profesor = set()
        self.numeros_empleado = set()
        self.num_personas = 0

    def ordenar_directorio(self):

        self.directorio = self._quicksort(self.directorio)

    def _quicksort(self, lista):
        if len(lista) <= 1:
            return lista
        pivot = lista[len(lista) // 2]
        izquierda = [x for x in lista if x.get_nombre().lower() < pivot.get_nombre().lower()]
        centro = [x for x in lista if x.get_nombre().lower() == pivot.get_nombre().lower()]
        derecha = [x for x in lista if x.get_nombre().lower() > pivot.get_nombre().lower()]
        return self._quicksort(izquierda) + centro + self._quicksort(derecha)

    def borrar_Alumno(self):

        while True:
            try:
                nombre = int(input('Escribe el numero del Alumno a eliminar: '))
                break
            except ValueError:
                print(f"Inserta un nombre")
        indice = self.ordenar_directorio()
        if indice == -1:
            print(f"No se encuentra el alumno con nombre {nombre}")
        else:
            alumno = self.ordenar_directorio()
            if isinstance(alumno, a.Alumno):
                if (indice == self.alumno - 1):
                    self.directorio.remove(alumno)
                    self.num_personas -= 1
                    print("Alumno eliminado\n")
                else:
                    self.directorio = None
                    self.num_personas -= 1
                    print("Alumno eliminado\n")
            else:
                print(f"No se encuentra el alumno con ese nombre {nombre}")

    def borrar_Profesor(self):

        while True:
            try:
                nombre = int(input('Escribe el numero del Profesor a eliminar: '))
                break
            except ValueError:
                print(f"Inserta un nombre")
        indice = self.ordenar_directorio()
        if indice == -1:
            print(f"No se encuentra el profesor con nombre {nombre}")
        else:
            profesor = self.directorio[indice]
            if isinstance(profesor, a.Profesor):
                self.directorio.remove(profesor)
                self.num_personas -= 1
                print("Profesor eliminado\n")
            else:
                print(f"No se encuentra el profesor con ese nombre {nombre}")

    def borrar_Coordinador(self):

        while True:
            try:
                nombre = int(input('Escribe el numero del Coordinador a eliminar: '))
                break
            except ValueError:
                print(f"Inserta un nombre")
        indice = self.ordenar_directorio()
        if indice == -1:
            print(f"No se encuentra el coordinador con nombre {nombre}")
        else:
            coordinador = self.directorio[indice]
            if isinstance(coordinador, a.Coordinador):
                self.directorio.remove(coordinador)
                self.num_personas -= 1
                print("Coordinador eliminado\n")
            else:
                print(f"No se encuentra el coordinador con ese nombre {nombre}")

    def actualizar_Alumno(self):
        '''
        Metodo para actualizar un alumno, si se encuentra el nombre del alumno
        desplegara un menu para saber que valor actualizar. Si no imprimira un mensaje.
        '''
        while True:
            nombre = input('Escribe el nombre del Alumno: ')
            break
        indice = self.buscar_indice(nombre)
        if indice == -1:
            print(f"No se encuentra el alumno con el nombre {nombre}")
        else:
            alumno = self.alumnos[indice]
            if isinstance(alumno, a.Alumno):
                print(alumno)
                opcion = ''
                while opcion != 'S':
                    opcion = self.menu_Actualizar_Alumno()
                    match opcion:
                        case "1":
                            while True:
                                nombre = input('Escribe el nombre del Alumno a actualizar: ')
                                if nombre not in self.nombre:
                                    self.nombre.remove(alumno.nombre)
                                    self.nombre.add(nombre)
                                    break
                                else:
                                    print(f"El nombre {nombre} ya existe, escribe otro")
                                    continue
                            alumno.nombre = nombre
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "2":
                            matricula = input('Escribe la matricula del alumno: ')
                            alumno.matricula = matricula
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "3":
                            celular = input('Escribe el celular del alumno: ')
                            alumno.celular = celular
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "4":
                            fecha_de_cumpleanos = input('Escribe la fecha de cumplea√±os del alumno: ')
                            alumno.fecha_de_cumpleanos = fecha_de_cumpleanos
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "5":
                            correo = input('Escribe el correo del alumno: ')
                            alumno.correo = correo
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "6":
                            carrera = input('Escribe la carrera del alumno: ')
                            alumno.carrera = carrera
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "7":
                            materias = input('Escribe las materias en las que esta inscrito el alumno: ')
                            alumno.materias = materias
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "8":
                            semestre = input('Escribe el semestre en el que esta inscrito el alumno: ')
                            alumno.semestre = semestre
                            self.alumnos[indice] = alumno
                            print('Alumno Actualizado \n')
                            opcion = ''

                        case "9":
                            print('Volviendo ...')

    def actualizar_Profesor(self):
        '''
        Metodo para actualizar un profesor, si se encuentra el nombre del profesor
        desplegara un menu para saber que valor actualizar. Si no imprimira un mensaje.
        '''
        while True:
            nombre = input('Escribe el nombre del Profesor: ')
            break
        indice = self.buscar_indice(nombre)
        if indice == -1:
            print(f"No se encuentra el profesor con el nombre {nombre}")
        else:
            profesor = self.profesores[indice]
            if isinstance(profesor, a.Profesor):
                print(profesor)
                opcion = ''
                while opcion != 'S':
                    opcion = self.menu_Actualizar_Profesor()
                    match opcion:
                        case "1":
                            while True:
                                nombre = input('Escribe el nombre del Profesor a actualizar: ')
                                if nombre not in self.nombre:
                                    self.nombre.remove(profesor.nombre)
                                    self.nombre.add(nombre)
                                    break
                                else:
                                    print(f"El nombre {nombre} ya existe, escribe otro")
                                    continue
                            profesor.nombre = nombre
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "2":
                            numero = input('Escribe el numero del profesor: ')
                            profesor.numero = numero
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "3":
                            celular = input('Escribe el celular del profesor: ')
                            profesor.celular = celular
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "4":
                            telefono = input('Escribe el telefono de oficina del profesor: ')
                            profesor.telefono = telefono
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "5":
                            fecha_de_cumpleanos = input('Escribe la fecha de cumplea√±os del profesor: ')
                            profesor.fecha_de_cumpleanos = fecha_de_cumpleanos
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "6":
                            correo = input('Escribe el correo del profesor: ')
                            profesor.correo = correo
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "7":
                            sueldo= input('Escribe el sueldo del profesor: ')
                            profesor.sueldo = sueldo
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "8":
                            departamento = input('Escribe el departamento de adcripci√≥n del profesor: ')
                            profesor.sueldo = departamento
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "9":
                            materias = input('Escribe las materias en las que imparte el profesor: ')
                            profesor.materias = materias
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "10":
                            grupos = input('Escribe los grupos que imparte el profesor: ')
                            profesor.grupos = grupos
                            self.profesores[indice] = profesor
                            print('Profesor Actualizado \n')
                            opcion = ''

                        case "11":
                            print('Volviendo ...')

    def actualizar_Coordinador(self):
        '''
        Metodo para actualizar un coordinador, si se encuentra el nombre del coordinador
        desplegara un menu para saber que valor actualizar. Si no imprimira un mensaje.
        '''
        while True:
            nombre = input('Escribe el nombre del Coordinador: ')
            break
        indice = self.buscar_indice(nombre)
        if indice == -1:
            print(f"No se encuentra el coordinador con el nombre {nombre}")
        else:
            coordinador = self.coordinadores[indice]
            if isinstance(coordinador, a.Coordinador):
                print(coordinador)
                opcion = ''
                while opcion != 'S':
                    opcion = self.menu_Actualizar_Coordinador()
                    match opcion:
                        case "1":
                            while True:
                                nombre = input('Escribe el nombre del Coordinador a actualizar: ')
                                if nombre not in self.nombre:
                                    self.nombre.remove(coordinador.nombre)
                                    self.nombre.add(nombre)
                                    break
                                else:
                                    print(f"El nombre {nombre} ya existe, escribe otro")
                                    continue
                            coordinador.nombre = nombre
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "2":
                            numero = input('Escribe el numero de empleado del coordinador: ')
                            coordinador.numero = numero
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "3":
                            celular = input('Escribe el celular del coordinador: ')
                            coordinador.celular = celular
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "4":
                            fecha_de_cumpleanos = input('Escribe la fecha de cumplea√±os del coordinador: ')
                            coordinador.fecha_de_cumpleanos = fecha_de_cumpleanos
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "5":
                            correo = input('Escribe el correo del coordinador: ')
                            coordinador.correo = correo
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "6":
                            carrera = input('Escribe la carrera a la que esta a cargo coordinador: ')
                            coordinador.carrera = carrera
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "7":
                            sueldo = input('Escribe el sueldo del coordinador ')
                            coordinador.sueldo = sueldo
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "8":
                            departamento = input('Escribe el departamento al que esta adcrito el coordinador: ')
                            coordinador.departamento = departamento
                            self.coordinadores[indice] = coordinador
                            print('Coordinador Actualizado \n')
                            opcion = ''

                        case "9":
                            print('Volviendo ...')

    def mostrar_profesores_y_coordinadores(self):
        """
        Muestra los profesores y coordinadores ordenados por nombre.
        """
        self.ordenar_directorio()
        print("Profesores:")
        for persona in self.directorio:
            if isinstance(persona, a.Profesor):
                print(persona.get_nombre())
        print("\nCoordinadores:")
        for persona in self.directorio:
            if isinstance(persona, a.Coordinador):
                print(persona.get_nombre())



    def eliminar_cel(self, celular):
        """
        Elimina los datos de un contacto a partir del n√∫mero de celular.
        """
        self.ordenar_directorio()
        for persona in self.directorio:
            if persona and persona.celular == celular:
                self.directorio.remove(persona)
                self.num_personas -= 1
                print(f"El contacto con el n√∫mero de celular: '{celular}' ha sido eliminado.")
                return
        print(f"No se encontr√≥ contacto con el n√∫mero de celular: {celular}")

    def eliminar_cel(self, correo):
        """
        Elimina los datos de un contacto a partir del correo electronico.
        """
        self.ordenar_directorio()
        for persona in self.directorio:
            if persona and persona.email == correo:
                self.directorio.remove(persona)
                self.num_personas -= 1
                print(f"El contacto con el correo electr√≥nico: '{correo}' ha sido eliminado.")
                return
        print(f"No se encontr√≥ contacto con el correo electr√≥nico: {correo}")
    def __init__(self, almacenamiento):
        """
        Constructor que permite crear el objeto Directorio (escolar) que sera
        un arreglo que contendra arreglos(informacion de contacto).
        Se construye como un directorio nuevo: vacio por default
        :param almacenamiento: indica el almacenamiento del directorio (0,n)
        """
        # Crear un directorio vacio
        self.directorio = np.empty(almacenamiento, dtype=object)
        self.numeros_cuenta = set()
        self.numeros_profesor = set()
        self.numeros_empleado = set()
        self.num_personas = 0

    # Insertar datos de un nuevo contacto (alumno, profesor o coordinador).
    def insertar_nuevo_alumno(self):
        """
        Metodo para agregar un alumno en el arreglo de directorio, para ello
        se pedira cada uno de los campos. El numero de cuenta no debe de estar ya en el
        arreglo de numeros de cuenta de alumnos.
        """
        while True:
            try:
                num_cuenta = int(input('Escribe el numero de cuenta de alumno: '))
                if num_cuenta not in self.numeros_cuenta:
                    self.numeros_cuenta.add(num_cuenta)
                    break
                else:
                    print(f"El numero de cuenta {num_cuenta} ya existe, escribe otro")
                    continue
            except ValueError:
                print('El numero de cuenta del alumno, tiene que ser un entero')
        nombre = input('Escribe el nombre completo del alumno: ')
        # la fecha de cumpleanios debe ser dia/mes
        cumpleanios = input('Escribe la fecha de cumpleanios del alumno: ')
        correo = input('Escribe el correo del alumno: ')
        carrera = input('Escribe la carrera del alumno: ')
        materias = list(input('Escribe las materias del alumno separadas por comas: '))

        while True:
            try:
                celular = int(input('Escribe el celular del alumno: '))
                break
            except ValueError:
                print('El celular del alumno tiene que ser un entero')
        while True:
            try:
                semestre = int(input('Escribe el semestre del alumno: '))
                break
            except ValueError:
                print('El semestre del alumno, tiene que ser un entero')
        self.directorio[self.num_personas] = cA.Alumno(nombre, celular, cumpleanios, correo, num_cuenta, carrera,
                                                       materias, semestre)
        self.num_personas += 1
        print('Alumno agregado\n')

    def insertar_nuevo_profesor(self):
        """
        Metodo para agregar un profesor en el arreglo de directorio, para ello
        se pedira cada uno de los campos. El numero de profesor no debe de estar ya en el
        arreglo de numero de profesores.
        """
        while True:
            try:
                num_profesor = int(input('Escribe el numero de Profesor: '))
                if num_profesor not in self.numeros_profesor:
                    self.numeros_cuenta.add(num_profesor)
                    break
                else:
                    print(f"El numero de profesor {num_profesor} ya existe, escribe otro")
                    continue
            except ValueError:
                print('El numero de profesor, tiene que ser un entero')
        nombre = input('Escribe el nombre completo del profesor: ')
        # la fecha de cumpleanios debe ser dia/mes
        cumpleanios = input('Escribe la fecha de cumpleanios del profesor: ')
        correo = input('Escribe el correo del profesor: ')
        dept = input('Escribe el departamento de adscripcion del profesor: ')
        carrera = input('Escribe la carrera en la que imparte materias el profesor: ')

        grupos = list(input('Escribe los grupos del profesor separados por comas: '))

        while True:
            try:
                celular = int(input('Escribe el celular del profesor: '))
                break
            except ValueError:
                print('El celular del profesor tiene que ser un entero')
        while True:
            try:
                tel_oficina = int(input('Escribe el telefono de oficina del profesor: '))
                break
            except ValueError:
                print('El telefono de oficina del profesor, tiene que ser un entero')
        while True:
            try:
                sueldo = int(input('Escribe el sueldo del profesor: '))
                break
            except ValueError:
                print('El sueldo del profesor, tiene que ser un entero')
        self.directorio[self.num_personas] = cPr.Profesor(nombre, celular, cumpleanios, correo, num_profesor,
                                                          tel_oficina, sueldo, dept, carrera, grupos)
        self.num_personas += 1
        print('Profesor agregado\n')

    def insertar_nuevo_coordinador(self):
        """
        Metodo para agregar un Coordinador en el arreglo de directorio, para ello
        se pedira cada uno de los campos. El numero de empleado no debe de estar ya en el
        arreglo de numero de empleados.
        """
        while True:
            try:
                num_empleado = int(input('Escribe el numero de Empleado: '))
                if num_empleado not in self.numeros_empleado:
                    self.numeros_cuenta.add(num_empleado)
                    break
                else:
                    print(f"El numero de empleado {num_empleado} ya existe, escribe otro")
                    continue
            except ValueError:
                print('El numero de empleado, tiene que ser un entero')
        nombre = input('Escribe el nombre completo del Coordinador: ')
        # la fecha de cumpleanios debe ser dia/mes
        cumpleanios = input('Escribe la fecha de cumpleanios del Coordinador: ')
        correo = input('Escribe el correo del Coordinador: ')
        dept = input('Escribe el departamento de adscripcion del Coordinador: ')
        carrera_coor = input('Escribe la carrera que coordina: ')
        while True:
            try:
                celular = int(input('Escribe el celular del Coordinador: '))
                break
            except ValueError:
                print('El celular del Coordinador tiene que ser un entero')
        while True:
            try:
                tel_oficina = int(input('Escribe el telefono de oficina del Coordinador: '))
                break
            except ValueError:
                print('El telefono de oficina del Coordinador, tiene que ser un entero')
        while True:
            try:
                sueldo = int(input('Escribe el sueldo del Coordinador: '))
                break
            except ValueError:
                print('El sueldo del Coordinador, tiene que ser un entero')
        self.directorio[self.num_personas] = cC.Coordinador(nombre, celular, cumpleanios, correo, num_empleado,
                                                            tel_oficina, sueldo, dept, carrera_coor)
        self.num_personas += 1
        print('Coordinador agregado\n')

    # Mostrar la informaci√≥n completa de un contacto, con solo proporcionar su nombre (independientemente que sea un
    # alumno, profesor o coordinador).
    def buscar_indice(self, nombre_completo) -> int:
        """
        Metodo auxiliar que busca el indice del arreglo de directorio, dado el nombre completo de una persona
        :param nombre_completo: El nombre_completo a buscar en el directorio
        :return: indice: Int - Si se encuentra en el arreglo el directorio regresa un valor >= 0
                        Si no se encuentra en el arreglo regresa un valor < 0
        :rtype: Int
        """
        for persona in self.directorio:
            if persona is not None and persona.nombre_completo == nombre_completo:
                return int(np.where(self.directorio == persona)[0][0])
        return -1

    def esta_vacio(self) -> bool:
        """
        Metodo que verifica si esta vacio el arreglo (directorio)
        :return: True - Si esta vacio el arreglo de personas
                 False - Si hay algun elemento en el arreglo de personas
        """
        return not self.directorio.any()

    def mostrar_persona(self, nombre):
        """
        Metodo __str__ que define como mostrar una persona dentro del directorio.
        La representa a traves de los elementos en el array.
        :param nombre: persona a mostrar
        :return: cadena: Str - La representacion de la persona en el directorio
        :rtype: Str
        """
        if not self.esta_vacio():
            posicion = self.buscar_indice(nombre)
            persona = self.directorio[posicion]
            if isinstance(persona, cA.Alumno):
                return ("\nNombre:\n" + persona.nombre_completo + "\nCelular:\n" + str(persona.celular) +
                        "\nCumpleanios:\n" + persona.fecha_cumpleanios + "\nCorreo:\n" + persona.email +
                        "\nNum. Cuenta:\n" + str(persona.num_cuenta) + "\nCarrera:\n" + persona.carrera +
                        "\nMaterias:\n" + str(persona.materias) + "\nSemestre:\n" + str(persona.semestre))
            elif isinstance(persona, cPr.Profesor):
                cPr.setlocale(cPr.LC_MONETARY, "en_US")
                return ("\nNombre:\n" + persona.nombre_completo + "\nCelular:\n" + str(persona.celular) +
                        "\nCumpleanios:\n" + persona.fecha_cumpleanios + "\nCorreo:\n" + persona.email +
                        "\nNum. Profesor:\n" + str(persona.num_profesor) + "\nTel. Oficina:\n" +
                        str(persona.tel_oficina) + "\nSueldo:\n" + cPr.currency(persona.sueldo, grouping=True) +
                        "\nDept. Ads.:\n" + persona.dept_ads + "\nCarrera donde imparte materias:\n" +
                        persona.carrera + "\nGrupos:\n" + str(persona.grupos))

            elif isinstance(persona, cC.Coordinador):
                cC.setlocale(cC.LC_MONETARY, "en_US")
                return ("\nNombre:\n" + persona.nombre_completo + "\nCelular:\n" + str(persona.celular) +
                        "\nCumpleanios:\n" + persona.fecha_cumpleanios + "\nCorreo:\n" + persona.email +
                        "\nNum. Empleado:\n" + str(persona.num_empleado) + "\nTel. Oficina:\n" +
                        str(persona.tel_oficina) + "\nSueldo:\n" + cC.currency(persona.sueldo, grouping=True) +
                        "\nDept. Ads.:\n" + persona.dept_ads + "\nCarrera que coordina:\n" + persona.carrera_coordina)
        return "No hay contactos."

    # extra: lectura/escritura de archivos CSV
    def lectura_csvs(self):
        """
        Metodo que carga/abre la informacion de un archivo en nuestro arreglo de directorio,
        dependiendo del tipo de persona, se utilizara el constructor correspodiente.
        """
        while True:
            nombre = input('Escribe el nombre del archivo con terminaci√≥n csv'
                           ', que deseas abrir: ')
            try:
                f = open(nombre, 'r')
                lineas = f.readlines()
                for linea in lineas:
                    linea = linea.split(",")
                    if linea[0] == 'A':
                        self.directorio[self.num_personas] = cA.Alumno(linea[1], int(linea[2]), linea[3], linea[4],
                                                                       int(linea[5]), linea[6], list(linea[7]),
                                                                       int(linea[8]))
                        self.numeros_cuenta.add(int(linea[5]))
                        self.num_personas += 1
                    elif linea[0] == 'P':
                        self.directorio[self.num_personas] = cPr.Profesor(linea[1], int(linea[2]), linea[3], linea[4],
                                                                          int(linea[5]), int(linea[6]), int(linea[7]),
                                                                          linea[8], linea[9], list(linea[10]))
                        self.numeros_cuenta.add(int(linea[5]))
                        self.num_personas += 1
                    elif linea[0] == 'C':
                        self.directorio[self.num_personas] = cC.Coordinador(linea[1], int(linea[2]), linea[3], linea[4],
                                                                            int(linea[5]), int(linea[6]), int(linea[7]),
                                                                            linea[8], linea[9])
                        self.numeros_cuenta.add(int(linea[5]))
                        self.num_personas += 1
                print("Archivo cargado correctamente")
                f.close()
                break
            except FileNotFoundError:
                print(f"El archivo {nombre} no existe")

    def escritura_csvs(self):
        """
        Metodo que guarda la informaci√≥n del arreglo de directorio, en un archivo csv
        para ello se utilizara los iteradores de cada tipo de persona
        """
        nombre = input('Escribe el nombre del archivo con terminaci√≥n csv'
                       ', con el que deseas guardar: ')
        f = open(nombre, 'w')
        for persona in self.directorio:
            if persona is not None:
                per = ''
                for atributo in persona:
                    per += str(atributo) + ','
                per = per[:-1] + '\n'
                f.write(per)
        f.close()

    def eliminar_cel(self, celular):
        """
        Elimina los datos de un contacto a partir del n√∫mero de celular.
        """
        self.ordenar_directorio()
        for persona in self.directorio:
            if persona and persona.celular == celular:
                self.directorio.remove(persona)
                self.num_personas -= 1
                print(f"El contacto con el n√∫mero de celular: '{celular}' ha sido eliminado.")
                return
        print(f"No se encontr√≥ contacto con el n√∫mero de celular: {celular}")

    def eliminar_email(self, correo):
        """
        Elimina los datos de un contacto a partir del correo electronico.
        """
        self.ordenar_directorio()
        for persona in self.directorio:
            if persona and persona.email == correo:
                self.directorio.remove(persona)
                self.num_personas -= 1
                print(f"El contacto con el correo electr√≥nico: '{correo}' ha sido eliminado.")
                return
            print(f"No se encontr√≥ contacto con el correo electr√≥nico: {correo}")

    def buscar_contacto_celular(self, celular):
        '''
        Busca y muestra los contatos con un n√∫mero de celular
        :param celular: Nombre de la carrera :str
        '''
        alumnos_cel = []
        profesores_cel= []
        coordinadores_cel = []

        for i in range(self.num_personas):
            if isinstance(self.directorio[i], cA.Alumno):
                if self.directorio[i].celular() == celular:
                    alumnos_cel.append(self.directorio[i])
            elif isinstance(self.directorio[i],cPr.Profesor):
                if self.directorio[i].celular() == celular:
                    profesores_cel.append(self.directorio[i])
            elif isinstance(self.directorio[i], cC.Coordinador):
                if self.directorio[i].celular() == celular:
                    coordinadores_cel.append(self.directorio[i])

        if alumnos_cel:
            print(f'Alumnos con el n√∫mero de celular: {celular}:')
            for alumno in alumnos_cel:
                    print(alumno)
        else:
            print(f'No hay alumnos con el n√∫mero de celular: {celular}')

        if profesores_cel:
            print(f'Profesores con el n√∫mero de celular:{celular}:')
            for profesor in profesores_cel:
                print(profesor)
        else:
            print(f'No hay profesores con el n√∫mero de celular: {celular}')

        if coordinadores_cel:
            print(f'Coordinadores de {celular}:')
            for coordinador in coordinadores_cel:
                    print(coordinador)
        else:
            print(f'No hay coordinadores con el n√∫mero de celular: {celular}')

    def buscar_contacto_cum(self, cumplea√±os):
        '''
        Busca y muestra los contatos respecto a una fecha de nacimiento
        :param cumplea√±os: Nombre de la carrera :str
        '''
        alumnos_cum = []
        profesores_cum= []
        coordinadores_cum = []

        for i in range(self.num_personas):
            if isinstance(self.directorio[i], cA.Alumno):
                if self.directorio[i].fecha_cumpleanios() == cumplea√±os:
                    alumnos_cum.append(self.directorio[i])
            elif isinstance(self.directorio[i],cPr.Profesor):
                if self.directorio[i].fecha_cumpleanios() == cumplea√±os:
                    profesores_cum.append(self.directorio[i])
            elif isinstance(self.directorio[i], cC.Coordinador):
                if self.directorio[i].fecha_cumpleanios() == cumplea√±os:
                    coordinadores_cum.append(self.directorio[i])

        if alumnos_cum:
            print(f'Alumnos con fecha de nacimiento: {cumplea√±os}:')
            for alumno in alumnos_cum:
                    print(alumno)
        else:
            print(f'No hay alumnos con fecha de nacimiento: {cumplea√±os}')

        if profesores_cum:
            print(f'Profesores con fecha de nacimiento:{cumplea√±os}:')
            for profesor in profesores_cum:
                print(profesor)
        else:
            print(f'No hay profesores con fecha de nacimiento: {cumplea√±os}')

        if coordinadores_cum:
            print(f'Coordinadores de {cumplea√±os}:')
            for coordinador in coordinadores_cum:
                    print(coordinador)
        else:
            print(f'No hay coordinadores con fecha de nacimiento: {cumplea√±os}')
